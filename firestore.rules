rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper: check the caller is a participant in given list
    function isParticipant(uid, participants) {
      return participants != null && uid in participants;
    }

    // Helper: list must have exactly 2 strings
    function isTwoStringList(l) {
      return l is list
             && l.size() == 2
             && l[0] is string
             && l[1] is string;
    }

    // Users
    match /users/{uid} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == uid;
      allow delete: if isAdmin();
    }

    // Plans (admin managed)
    match /plans/{planId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Subscriptions (admin/back-end writes)
    match /subscriptions/{subId} {
      allow read: if request.auth != null
                  && (resource.data.uid == request.auth.uid || isAdmin());
      allow create, update, delete: if isAdmin();
    }

    // Payments (client creates pending; admin updates)
    match /payments/{paymentId} {
      allow create: if request.auth != null
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.status == 'pending';
      allow read: if request.auth != null
                  && (resource.data.uid == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Matching rounds and per-girl assignments
    match /matchingRounds/{roundId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();

      match /assignments/{girlUid} {
        allow read: if request.auth != null
                    && (request.auth.uid == girlUid || isAdmin());
        allow write: if isAdmin();
      }
    }

    // Likes
    match /likes/{likeId} {
      allow create: if request.auth != null
                    && (
                      request.resource.data.likingUserUid == request.auth.uid
                      || request.resource.data.likerUid == request.auth.uid
                    )
                    && request.resource.data.likedUserUid is string
                    && request.resource.data.roundId is string;
      allow read: if request.auth != null;
      allow update, delete: if isAdmin()
                            || (request.auth != null && resource.data.likingUserUid == request.auth.uid)
                            || (request.auth != null && resource.data.likerUid == request.auth.uid);
    }

    // Matches
    match /matches/{matchId} {
      allow read: if request.auth != null
                  && (
                    (resource.data.participants != null && request.auth.uid in resource.data.participants)
                    || isAdmin()
                  );
      allow create, update, delete: if isAdmin();
    }

    // ================= Chat: threads and messages =================
    match /threads/{threadId} {

      // Read: participants or admin
      allow read: if request.auth != null
                  && (isAdmin() || isParticipant(request.auth.uid, resource.data.participants));

      // Create: include self and exactly two string UIDs
      allow create: if request.auth != null
                    && isTwoStringList(request.resource.data.participants)
                    && request.auth.uid in request.resource.data.participants
                    && request.resource.data.createdAt != null
                    && request.resource.data.updatedAt != null;

      // Update: participant can update but cannot change participants
      allow update: if isAdmin()
                    || (
                      request.auth != null
                      && isParticipant(request.auth.uid, resource.data.participants)
                      && request.resource.data.participants == resource.data.participants
                    );

      // Delete: admin only
      allow delete: if isAdmin();

      // Messages subcollection
      match /messages/{messageId} {
        // Read messages: participants or admin
        allow read: if request.auth != null
                    && (isAdmin()
                        || isParticipant(request.auth.uid, get(/databases/$(database)/documents/threads/$(threadId)).data.participants));

        // Create message: only a participant; senderUid must match auth
        allow create: if request.auth != null
                      && isParticipant(request.auth.uid, get(/databases/$(database)/documents/threads/$(threadId)).data.participants)
                      && request.resource.data.senderUid == request.auth.uid
                      && request.resource.data.text is string
                      && request.resource.data.createdAt != null;

        // Update/Delete messages: admin only (optional moderation)
        allow update, delete: if isAdmin();
      }
    }
    // ==============================================================
  }
}