rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users: authenticated can read; user can write own; admins can delete
    match /users/{uid} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == uid;
      allow delete: if isAdmin();
    }

    // Payments: user creates pending; admin approves/rejects
    match /payments/{paymentId} {
      allow create: if request.auth != null
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.status == 'pending';
      allow read: if request.auth != null
                  && (resource.data.uid == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Matching rounds and assignments
    match /matchingRounds/{roundId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();

      // assignments per girl
      match /assignments/{girlUid} {
        allow read: if request.auth != null
                    && (request.auth.uid == girlUid || isAdmin());
        allow write: if isAdmin();
      }
    }

    // Likes
    match /likes/{likeId} {
      allow create: if request.auth != null
                    && request.resource.data.likerUid == request.auth.uid;
      allow read: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    // Matches: created/managed by admin (or backend)
    match /matches/{matchId} {
      allow create, update, delete: if isAdmin();
      allow read: if request.auth != null
        && (request.resource.data.participants != null
            && request.auth.uid in request.resource.data.participants
            || isAdmin());
    }
  }
}