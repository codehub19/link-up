rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isParticipant(uid, participants) {
      return participants != null && uid in participants;
    }

    function isTwoStringList(l) {
      return l is list && l.size() == 2 && l[0] is string && l[1] is string;
    }


    match /users/{uid} {
      allow read: if request.auth != null;
      allow create, update: if (request.auth != null && request.auth.uid == uid) || isAdmin();
      allow delete: if isAdmin();
    }
    

    // Plans
    match /plans/{planId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Subscriptions
    match /subscriptions/{subId} {
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin());
      allow create, update, delete: if isAdmin();
    }

    // Payments
    match /payments/{paymentId} {
      allow create: if request.auth != null
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.status == 'pending';
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Matching rounds and assignments
    match /matchingRounds/{roundId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();

      match /assignments/{girlUid} {
        allow read: if request.auth != null && (request.auth.uid == girlUid || isAdmin());
        allow write: if isAdmin();
      }
    }

    // Likes
    match /likes/{likeId} {
      allow create: if request.auth != null
                    && (
                      request.resource.data.likingUserUid == request.auth.uid
                      || request.resource.data.likerUid == request.auth.uid
                    )
                    && request.resource.data.likedUserUid is string
                    && request.resource.data.roundId is string;
      allow read: if request.auth != null;
      allow update, delete: if isAdmin()
                            || (request.auth != null && resource.data.likingUserUid == request.auth.uid)
                            || (request.auth != null && resource.data.likerUid == request.auth.uid);
    }

    // Matches (readable by participants, writes via Cloud Functions)
    match /matches/{matchId} {
      allow read: if request.auth != null
                  && ((resource.data.participants != null && request.auth.uid in resource.data.participants) || isAdmin());
      allow create, update, delete: if isAdmin();
    }

    // Chat threads and messages
    match /threads/{threadId} {
      // Participants (or admin) can read existing threads
      allow read: if request.auth != null && (isAdmin() || isParticipant(request.auth.uid, resource.data.participants));

      // Create must include two participants incl. the caller, and timestamps
      allow create: if request.auth != null
                    && isTwoStringList(request.resource.data.participants)
                    && request.auth.uid in request.resource.data.participants
                    && request.resource.data.createdAt != null
                    && request.resource.data.updatedAt != null;

      // Update allowed for participants as long as participants list is unchanged
      allow update: if isAdmin()
                    || (
                      request.auth != null
                      && isParticipant(request.auth.uid, resource.data.participants)
                      && request.resource.data.participants == resource.data.participants
                    );

      allow delete: if isAdmin();

      match /messages/{messageId} {
        allow read: if request.auth != null
                    && (isAdmin()
                        || isParticipant(
                             request.auth.uid,
                             get(/databases/$(database)/documents/threads/$(threadId)).data.participants
                           ));

        allow create: if request.auth != null
                      && isParticipant(
                           request.auth.uid,
                           get(/databases/$(database)/documents/threads/$(threadId)).data.participants
                         )
                      && request.resource.data.senderUid == request.auth.uid
                      && request.resource.data.text is string
                      && request.resource.data.createdAt != null;

        allow update, delete: if isAdmin();
      }
    }

    // Per-user block list for chat gating: userBlocks/{userId}
    // - Self (and admin) can read/write their own block list.
    // - The blocked person can read the doc only if their uid is in the list (to discover they’re blocked).
    // - If the doc does not exist, allow read so onSnapshot/getDoc won’t fail.
    match /userBlocks/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||                                      // owner
        isAdmin() ||                                                        // admin
        !exists(/databases/$(database)/documents/userBlocks/$(userId)) ||   // non-existent doc is OK to read
        (
          exists(/databases/$(database)/documents/userBlocks/$(userId)) &&  // blocked user can read
          request.auth.uid in (get(/databases/$(database)/documents/userBlocks/$(userId)).data.uids || [])
        )
      );

      // Only the owner (or admin for delete) can modify their list
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Optional: reports created from the chat Report flow
    match /reports/{reportId} {
      // Allow users to create reports about others; admin can read/manage
      allow create: if request.auth != null
                    && request.resource.data.reporterUid == request.auth.uid
                    && request.resource.data.reportedUid is string
                    && request.resource.data.threadId is string
                    && request.resource.data.reason is string
                    && request.resource.data.createdAt != null;
      allow read: if isAdmin();
      allow update, delete: if isAdmin();
    }
  }
}