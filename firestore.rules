rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isTwoStringList(l) {
      return l is list && l.size() == 2 && l[0] is string && l[1] is string;
    }

    // Users
    match /users/{uid} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == uid;
      allow delete: if isAdmin();
    }

    // Plans / Subscriptions / Payments (unchanged, trimmed for brevity)
    match /plans/{id} { allow read: if request.auth != null; allow write: if isAdmin(); }
    match /subscriptions/{id} {
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin());
      allow write: if isAdmin();
    }
    match /payments/{id} {
      allow create: if request.auth != null
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.status == 'pending';
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin());
      allow write: if isAdmin();
    }

    match /matchingRounds/{id} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
      match /assignments/{girlUid} {
        allow read: if request.auth != null && (request.auth.uid == girlUid || isAdmin());
        allow write: if isAdmin();
      }
    }

    match /likes/{id} {
      allow create: if request.auth != null
                    && (request.resource.data.likingUserUid == request.auth.uid
                        || request.resource.data.likerUid == request.auth.uid)
                    && request.resource.data.likedUserUid is string
                    && request.resource.data.roundId is string;
      allow read: if request.auth != null;
      allow update, delete: if isAdmin()
                            || (request.auth != null && resource.data.likingUserUid == request.auth.uid)
                            || (request.auth != null && resource.data.likerUid == request.auth.uid);
    }

    // Matches — source of truth for who can chat
    match /matches/{matchId} {
      allow read: if request.auth != null
                  && ((resource.data.participants != null && request.auth.uid in resource.data.participants) || isAdmin());
      allow create, update, delete: if isAdmin();
    }

    // Threads — metadata only (lastMessage, blocks, updatedAt). Doc id == matchId.
    match /threads/{matchId} {
      // Participants can read thread meta if the match exists
      allow read: if request.auth != null
                  && exists(/databases/$(database)/documents/matches/$(matchId))
                  && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.participants;

      // Create requires participant in the match
      allow create: if request.auth != null
                    && exists(/databases/$(database)/documents/matches/$(matchId))
                    && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.participants
                    && request.resource.data.createdAt != null
                    && request.resource.data.updatedAt != null;

      // Update allowed if participant; participants field must not change if present
      allow update: if request.auth != null
                    && exists(/databases/$(database)/documents/matches/$(matchId))
                    && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.participants
                    && (!('participants' in request.resource.data)
                        || request.resource.data.participants == resource.data.participants);

      allow delete: if isAdmin();

      // Messages under thread
      match /messages/{messageId} {
        // Participants can read messages if the match exists
        allow read: if request.auth != null
                    && exists(/databases/$(database)/documents/matches/$(matchId))
                    && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.participants;

        // Participants can send if:
        // - Match exists and is confirmed
        // - Sender is a participant
        // - If thread exists and has blocks, sender is not blocked
        // - Valid payload
        allow create: if request.auth != null
                      && exists(/databases/$(database)/documents/matches/$(matchId))
                      && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.participants
                      && get(/databases/$(database)/documents/matches/$(matchId)).data.status == 'confirmed'
                      && (
                           !exists(/databases/$(database)/documents/threads/$(matchId))
                           || get(/databases/$(database)/documents/threads/$(matchId)).data.blocks[request.auth.uid] != true
                         )
                      && request.resource.data.senderUid == request.auth.uid
                      && request.resource.data.text is string
                      && request.resource.data.createdAt != null;

        allow update, delete: if isAdmin();
      }
    }

    // Reports
    match /reports/{reportId} {
      allow create: if request.auth != null
                    && request.resource.data.reporterUid == request.auth.uid
                    && request.resource.data.reportedUid is string
                    && request.resource.data.threadId is string
                    && request.resource.data.reason is string
                    && request.resource.data.createdAt != null;
      allow read, update, delete: if isAdmin();
    }
  }
}