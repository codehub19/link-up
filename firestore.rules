rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{uid} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == uid;
      allow delete: if isAdmin();
    }

    match /plans/{planId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /subscriptions/{subId} {
      allow read: if request.auth != null
                  && (resource.data.uid == request.auth.uid || isAdmin());
      // Subscriptions are written by backend (Admin SDK) only
      allow create, update, delete: if isAdmin();
    }

    match /payments/{paymentId} {
      allow create: if request.auth != null
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.status == 'pending';
      allow read: if request.auth != null
                  && (resource.data.uid == request.auth.uid || isAdmin());
      allow update, delete: if isAdmin();
    }

    match /matchingRounds/{roundId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();

      match /assignments/{girlUid} {
        allow read: if request.auth != null
                    && (request.auth.uid == girlUid || isAdmin());
        allow write: if isAdmin();
      }
    }

    match /likes/{likeId} {
      allow create: if request.auth != null
                    && (
                      request.resource.data.likingUserUid == request.auth.uid
                      || request.resource.data.likerUid == request.auth.uid
                    )
                    && request.resource.data.likedUserUid is string
                    && request.resource.data.roundId is string;
      allow read: if request.auth != null;
      allow update, delete: if isAdmin()
                            || (request.auth != null && resource.data.likingUserUid == request.auth.uid)
                            || (request.auth != null && resource.data.likerUid == request.auth.uid);
    }

    match /matches/{matchId} {
      allow read: if request.auth != null
                  && (
                    (resource.data.participants != null && request.auth.uid in resource.data.participants)
                    || isAdmin()
                  );
      allow create, update, delete: if isAdmin();
    }
  }
}